#!perl

# DATE
# VERSION

use strict;
use warnings;

use Complete::Util qw(complete_array_elem hashify_answer);
use Cwd qw(getcwd);
use Getopt::Long::Complete qw(GetOptionsWithCompletion);

my $cwd = getcwd();
my ($curname) = $cwd =~ m!/([^/]*)$!;
my $print = 0;

GetOptionsWithCompletion(
    sub {
        my %args = @_;
        my $type = $args{type};
        my $word = $args{word};

        if ($word eq '') {
            my $res = hashify_answer(
                complete_array_elem(
                    word=>$word, array=>[$curname, "$curname "]),
            );
            $res->{final} = 1;
            return $res;
        } elsif ($type eq 'arg') {
            my @dirs;
            opendir my $dh, "..";
            for my $e (readdir $dh) {
                next if $e eq '.' || $e eq '..';
                next unless -d "../$e";
                push @dirs, $e;
            }
            return complete_array_elem(
                word=>$word, array=>\@dirs);
        }
        undef;
    },
    'help|h' => sub {
        print <<USAGE;
Usage:
  % renwd <newname>
Options:
  --help, -h
  --version, -v
USAGE
        exit 0;
    },
    'version|v' => sub {
        no warnings 'once';
        print "renwd version ", ($main::VERSION || "dev"), "\n";
        exit 0;
    },
    print => \$print,
);
die "Usage: renwd <newname>\n" unless @ARGV == 1;

-e "../$ARGV[0]" and die "renwd: Can't rename: ../$ARGV[0] already exists\n";
rename "../$curname", "../$ARGV[0]" or die "renwd: Can't rename: $!\n";
print "$ARGV[0]\n" if $print;

1;
# ABSTRACT: REName current (Working Directory)
# PODNAME:

=head1 SYNOPSIS

This is a script to do the simple:

 % mv ../curdirname ../newname

except with one convenience: tab completion. If you activate tab completion for
this script (e.g. via C<complete -C renwd renwd>), then you can do:

 % renwd <Tab>

and the current directory name is completed for you to edit/modify/

=cut
